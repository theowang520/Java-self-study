/*
 * 继承：
 * 提高代码的复用性
 * 让类与类之间产生了关系，有了这个关系，才有了多态的特性 
 * java只支持单继承 因为多继承容易带来安全隐患
 * 支持多层继承a――>b――>c
 * 继承体系：先看父类 共性方法
 * 具体调用要创建最子类的对象
 * 1父类可能不能创建对象
 * 2最子类功能多
 */

/*
 *this 本类
 *super 父类 
 */

/*
 * 子父类出现后，类成员的特点
 * 一、变量
 * 如果子类中出现非私有同名成员变量是
 * 子类访问本类变量用this
 * 访问父类用super
 * 
 * 二、函数
 * 子类出现和父类一样的函数时
 * 当子类对象调用该函数，会运行子类函数的内容
 * 如同父类的函数被覆盖一样（特性：重写）  
 * 
 * 当子类继承父类，沿袭了父类的功能
 * 但是子类虽有该功能但功能内容不同
 * 这时没有必要定义新功能，使用覆盖特性
 * 保留父类的功能定义并重写内容
 * 
 * 覆盖
 * 1子类覆盖父类，必须保证子类权限大于等于父类权限
 * 2静态只能覆盖静态
 * 
 * 注意
 * 重载：只看同名函数的参数列表
 * 重写：子父类方法要一模一样
 * 
 * 三、构造函数
 * 在对子类对象进行初始化时，父类的构造函数也会运行
 * 因为子类构造函数默认第一行有一条 super（）
 * 访问父类中空参数的构造函数
 * 
 * ！！子类一定要访问父类中的构造函数！！
 * 
 * 
 * 结论：
 * 子类中的所有构造函数，默认都会访问父类中空参数的构造函数
 * 当父类中没有空参构造函数，子类必须手动通过super形式指定访问父类构造函数
 * 当然子类的构造函数也可以手动指定this语句访问本类构造函数
 * 子类中至少有一个构造函数访问父类中的构造函数
 * 
 */
package jicheng;

public class Person {
	String name;
	int age;
}
